
class Solution:
    # Function to sort a linked list of 0s, 1s and 2s.
    def segregate(self, head):
        # If list is empty or has only one node
        if not head or not head.next:
            return head

        # Create dummy heads for three lists
        zeroHead = Node(-1)
        oneHead = Node(-1)
        twoHead = Node(-1)

        # Pointers to track the end of each list
        zero = zeroHead
        one = oneHead
        two = twoHead

        # Current pointer to traverse the list
        current = head

        # Traverse the list and segregate nodes
        while current:
            if current.data == 0:
                zero.next = current
                zero = zero.next
            elif current.data == 1:
                one.next = current
                one = one.next
            else:
                two.next = current
                two = two.next

            # Move to next node
            current = current.next

        # Terminate all lists
        zero.next = None
        one.next = None
        two.next = None

        # Connect the lists
        if zeroHead.next:
            head = zeroHead.next
            if oneHead.next:
                zero.next = oneHead.next
                if twoHead.next:
                    one.next = twoHead.next
            elif twoHead.next:
                zero.next = twoHead.next
        elif oneHead.next:
            head = oneHead.next
            if twoHead.next:
                one.next = twoHead.next
        else:
            head = twoHead.next

        return head
